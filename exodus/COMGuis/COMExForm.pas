{
    Copyright 2001-2008, Estate of Peter Millard
	
	This file is part of Exodus.
	
	Exodus is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or
	(at your option) any later version.
	
	Exodus is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with Exodus; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
}
unit COMExForm;



{-----------------------------------------------------------------------------}
{-----------------------------------------------------------------------------}
{ This is autogenerated code using the COMGuiGenerator. DO NOT MODIFY BY HAND }
{-----------------------------------------------------------------------------}
{-----------------------------------------------------------------------------}


{$WARN SYMBOL_PLATFORM OFF}

interface
uses
    ActiveX,Classes,COMExFont,COMExMainMenu,COMExMenuItem,COMExPopupMenu,ComObj,Controls,Exodus_TLB,Forms,Graphics,StdCtrls,StdVcl,TntMenus;

type
    TExControlForm = class(TAutoObject, IExodusControl, IExodusControlForm)
    public
        constructor Create(control: TForm);

    private
        _control: TForm;

    protected
        function Get_ControlType: ExodusControlTypes; safecall;
        function Get_Name: Widestring; safecall;
        procedure Set_Name(const Value: Widestring); safecall;
        function Get_Tag: Integer; safecall;
        procedure Set_Tag(Value: Integer); safecall;
        function Get_Left: Integer; safecall;
        procedure Set_Left(Value: Integer); safecall;
        function Get_Top: Integer; safecall;
        procedure Set_Top(Value: Integer); safecall;
        function Get_Width: Integer; safecall;
        procedure Set_Width(Value: Integer); safecall;
        function Get_Height: Integer; safecall;
        procedure Set_Height(Value: Integer); safecall;
        function Get_Cursor: Integer; safecall;
        procedure Set_Cursor(Value: Integer); safecall;
        function Get_Hint: Widestring; safecall;
        procedure Set_Hint(const Value: Widestring); safecall;
        function Get_HelpType: Integer; safecall;
        procedure Set_HelpType(Value: Integer); safecall;
        function Get_HelpKeyword: Widestring; safecall;
        procedure Set_HelpKeyword(const Value: Widestring); safecall;
        function Get_HelpContext: Integer; safecall;
        procedure Set_HelpContext(Value: Integer); safecall;
        function Get_Align: Integer; safecall;
        procedure Set_Align(Value: Integer); safecall;
        function Get_AlphaBlend: Integer; safecall;
        procedure Set_AlphaBlend(Value: Integer); safecall;
        function Get_AlphaBlendValue: Integer; safecall;
        procedure Set_AlphaBlendValue(Value: Integer); safecall;
        function Get_AutoScroll: Integer; safecall;
        procedure Set_AutoScroll(Value: Integer); safecall;
        function Get_AutoSize: Integer; safecall;
        procedure Set_AutoSize(Value: Integer); safecall;
        function Get_BiDiMode: Integer; safecall;
        procedure Set_BiDiMode(Value: Integer); safecall;
        function Get_BorderStyle: Integer; safecall;
        procedure Set_BorderStyle(Value: Integer); safecall;
        function Get_BorderWidth: Integer; safecall;
        procedure Set_BorderWidth(Value: Integer); safecall;
        function Get_Caption: Widestring; safecall;
        procedure Set_Caption(const Value: Widestring); safecall;
        function Get_ClientHeight: Integer; safecall;
        procedure Set_ClientHeight(Value: Integer); safecall;
        function Get_ClientWidth: Integer; safecall;
        procedure Set_ClientWidth(Value: Integer); safecall;
        function Get_Color: Integer; safecall;
        procedure Set_Color(Value: Integer); safecall;
        function Get_TransparentColor: Integer; safecall;
        procedure Set_TransparentColor(Value: Integer); safecall;
        function Get_TransparentColorValue: Integer; safecall;
        procedure Set_TransparentColorValue(Value: Integer); safecall;
        function Get_Ctl3D: Integer; safecall;
        procedure Set_Ctl3D(Value: Integer); safecall;
        function Get_UseDockManager: Integer; safecall;
        procedure Set_UseDockManager(Value: Integer); safecall;
        function Get_DefaultMonitor: Integer; safecall;
        procedure Set_DefaultMonitor(Value: Integer); safecall;
        function Get_DockSite: Integer; safecall;
        procedure Set_DockSite(Value: Integer); safecall;
        function Get_DragKind: Integer; safecall;
        procedure Set_DragKind(Value: Integer); safecall;
        function Get_DragMode: Integer; safecall;
        procedure Set_DragMode(Value: Integer); safecall;
        function Get_Enabled: Integer; safecall;
        procedure Set_Enabled(Value: Integer); safecall;
        function Get_ParentFont: Integer; safecall;
        procedure Set_ParentFont(Value: Integer); safecall;
        function Get_Font: IExodusControlFont; safecall;
        function Get_FormStyle: Integer; safecall;
        procedure Set_FormStyle(Value: Integer); safecall;
        function Get_HelpFile: Widestring; safecall;
        procedure Set_HelpFile(const Value: Widestring); safecall;
        function Get_KeyPreview: Integer; safecall;
        procedure Set_KeyPreview(Value: Integer); safecall;
        function Get_Menu: IExodusControlMainMenu; safecall;
        function Get_OldCreateOrder: Integer; safecall;
        procedure Set_OldCreateOrder(Value: Integer); safecall;
        function Get_ObjectMenuItemCount: integer; safecall;
        function Get_ObjectMenuItem(Index: integer): IExodusControlMenuItem; safecall;
        function Get_ParentBiDiMode: Integer; safecall;
        procedure Set_ParentBiDiMode(Value: Integer); safecall;
        function Get_PixelsPerInch: Integer; safecall;
        procedure Set_PixelsPerInch(Value: Integer); safecall;
        function Get_PopupMenu: IExodusControlPopupMenu; safecall;
        function Get_Position: Integer; safecall;
        procedure Set_Position(Value: Integer); safecall;
        function Get_PrintScale: Integer; safecall;
        procedure Set_PrintScale(Value: Integer); safecall;
        function Get_Scaled: Integer; safecall;
        procedure Set_Scaled(Value: Integer); safecall;
        function Get_ScreenSnap: Integer; safecall;
        procedure Set_ScreenSnap(Value: Integer); safecall;
        function Get_ShowHint: Integer; safecall;
        procedure Set_ShowHint(Value: Integer); safecall;
        function Get_SnapBuffer: Integer; safecall;
        procedure Set_SnapBuffer(Value: Integer); safecall;
        function Get_Visible: Integer; safecall;
        procedure Set_Visible(Value: Integer); safecall;
        function Get_WindowState: Integer; safecall;
        procedure Set_WindowState(Value: Integer); safecall;
        function Get_WindowMenuCount: integer; safecall;
        function Get_WindowMenu(Index: integer): IExodusControlMenuItem; safecall;
    end;


{---------------------------------------}
{---------------------------------------}
{---------------------------------------}
implementation


constructor TExControlForm.Create(control: TForm);
begin
     _control := control; 
end;

function TExControlForm.Get_ControlType: ExodusControlTypes;
begin
    Result := ExodusControlForm;
end;

function TExControlForm.Get_Name: Widestring;
begin
      Result := _control.Name;
end;

procedure TExControlForm.Set_Name(const Value: Widestring);
begin
      _control.Name := Value;
end;

function TExControlForm.Get_Tag: Integer;
begin
      Result := _control.Tag;
end;

procedure TExControlForm.Set_Tag(Value: Integer);
begin
      _control.Tag := Value;
end;

function TExControlForm.Get_Left: Integer;
begin
      Result := _control.Left;
end;

procedure TExControlForm.Set_Left(Value: Integer);
begin
      _control.Left := Value;
end;

function TExControlForm.Get_Top: Integer;
begin
      Result := _control.Top;
end;

procedure TExControlForm.Set_Top(Value: Integer);
begin
      _control.Top := Value;
end;

function TExControlForm.Get_Width: Integer;
begin
      Result := _control.Width;
end;

procedure TExControlForm.Set_Width(Value: Integer);
begin
      _control.Width := Value;
end;

function TExControlForm.Get_Height: Integer;
begin
      Result := _control.Height;
end;

procedure TExControlForm.Set_Height(Value: Integer);
begin
      _control.Height := Value;
end;

function TExControlForm.Get_Cursor: Integer;
begin
      Result := _control.Cursor;
end;

procedure TExControlForm.Set_Cursor(Value: Integer);
begin
      _control.Cursor := Value;
end;

function TExControlForm.Get_Hint: Widestring;
begin
      Result := _control.Hint;
end;

procedure TExControlForm.Set_Hint(const Value: Widestring);
begin
      _control.Hint := Value;
end;

function TExControlForm.Get_HelpType: Integer;
begin
    if (_control.HelpType = htKeyword) then Result := 0;
    if (_control.HelpType = htContext) then Result := 1;
end;

procedure TExControlForm.Set_HelpType(Value: Integer);
begin
   if (Value = 0) then _control.HelpType := htKeyword;
   if (Value = 1) then _control.HelpType := htContext;
end;

function TExControlForm.Get_HelpKeyword: Widestring;
begin
      Result := _control.HelpKeyword;
end;

procedure TExControlForm.Set_HelpKeyword(const Value: Widestring);
begin
      _control.HelpKeyword := Value;
end;

function TExControlForm.Get_HelpContext: Integer;
begin
      Result := _control.HelpContext;
end;

procedure TExControlForm.Set_HelpContext(Value: Integer);
begin
      _control.HelpContext := Value;
end;

function TExControlForm.Get_Align: Integer;
begin
    if (_control.Align = alNone) then Result := 0;
    if (_control.Align = alTop) then Result := 1;
    if (_control.Align = alBottom) then Result := 2;
    if (_control.Align = alLeft) then Result := 3;
    if (_control.Align = alRight) then Result := 4;
    if (_control.Align = alClient) then Result := 5;
    if (_control.Align = alCustom) then Result := 6;
end;

procedure TExControlForm.Set_Align(Value: Integer);
begin
   if (Value = 0) then _control.Align := alNone;
   if (Value = 1) then _control.Align := alTop;
   if (Value = 2) then _control.Align := alBottom;
   if (Value = 3) then _control.Align := alLeft;
   if (Value = 4) then _control.Align := alRight;
   if (Value = 5) then _control.Align := alClient;
   if (Value = 6) then _control.Align := alCustom;
end;

function TExControlForm.Get_AlphaBlend: Integer;
begin
    if (_control.AlphaBlend = False) then Result := 0;
    if (_control.AlphaBlend = True) then Result := 1;
end;

procedure TExControlForm.Set_AlphaBlend(Value: Integer);
begin
   if (Value = 0) then _control.AlphaBlend := False;
   if (Value = 1) then _control.AlphaBlend := True;
end;

function TExControlForm.Get_AlphaBlendValue: Integer;
begin
      Result := _control.AlphaBlendValue;
end;

procedure TExControlForm.Set_AlphaBlendValue(Value: Integer);
begin
      _control.AlphaBlendValue := Value;
end;

function TExControlForm.Get_AutoScroll: Integer;
begin
    if (_control.AutoScroll = False) then Result := 0;
    if (_control.AutoScroll = True) then Result := 1;
end;

procedure TExControlForm.Set_AutoScroll(Value: Integer);
begin
   if (Value = 0) then _control.AutoScroll := False;
   if (Value = 1) then _control.AutoScroll := True;
end;

function TExControlForm.Get_AutoSize: Integer;
begin
    if (_control.AutoSize = False) then Result := 0;
    if (_control.AutoSize = True) then Result := 1;
end;

procedure TExControlForm.Set_AutoSize(Value: Integer);
begin
   if (Value = 0) then _control.AutoSize := False;
   if (Value = 1) then _control.AutoSize := True;
end;

function TExControlForm.Get_BiDiMode: Integer;
begin
    if (_control.BiDiMode = bdLeftToRight) then Result := 0;
    if (_control.BiDiMode = bdRightToLeft) then Result := 1;
    if (_control.BiDiMode = bdRightToLeftNoAlign) then Result := 2;
    if (_control.BiDiMode = bdRightToLeftReadingOnly) then Result := 3;
end;

procedure TExControlForm.Set_BiDiMode(Value: Integer);
begin
   if (Value = 0) then _control.BiDiMode := bdLeftToRight;
   if (Value = 1) then _control.BiDiMode := bdRightToLeft;
   if (Value = 2) then _control.BiDiMode := bdRightToLeftNoAlign;
   if (Value = 3) then _control.BiDiMode := bdRightToLeftReadingOnly;
end;

function TExControlForm.Get_BorderStyle: Integer;
begin
    if (_control.BorderStyle = bsNone) then Result := 0;
    if (_control.BorderStyle = bsSingle) then Result := 1;
    if (_control.BorderStyle = bsSizeable) then Result := 2;
    if (_control.BorderStyle = bsDialog) then Result := 3;
    if (_control.BorderStyle = bsToolWindow) then Result := 4;
    if (_control.BorderStyle = bsSizeToolWin) then Result := 5;
end;

procedure TExControlForm.Set_BorderStyle(Value: Integer);
begin
   if (Value = 0) then _control.BorderStyle := bsNone;
   if (Value = 1) then _control.BorderStyle := bsSingle;
   if (Value = 2) then _control.BorderStyle := bsSizeable;
   if (Value = 3) then _control.BorderStyle := bsDialog;
   if (Value = 4) then _control.BorderStyle := bsToolWindow;
   if (Value = 5) then _control.BorderStyle := bsSizeToolWin;
end;

function TExControlForm.Get_BorderWidth: Integer;
begin
      Result := _control.BorderWidth;
end;

procedure TExControlForm.Set_BorderWidth(Value: Integer);
begin
      _control.BorderWidth := Value;
end;

function TExControlForm.Get_Caption: Widestring;
begin
      Result := _control.Caption;
end;

procedure TExControlForm.Set_Caption(const Value: Widestring);
begin
      _control.Caption := Value;
end;

function TExControlForm.Get_ClientHeight: Integer;
begin
      Result := _control.ClientHeight;
end;

procedure TExControlForm.Set_ClientHeight(Value: Integer);
begin
      _control.ClientHeight := Value;
end;

function TExControlForm.Get_ClientWidth: Integer;
begin
      Result := _control.ClientWidth;
end;

procedure TExControlForm.Set_ClientWidth(Value: Integer);
begin
      _control.ClientWidth := Value;
end;

function TExControlForm.Get_Color: Integer;
begin
      Result := _control.Color;
end;

procedure TExControlForm.Set_Color(Value: Integer);
begin
      _control.Color := Value;
end;

function TExControlForm.Get_TransparentColor: Integer;
begin
    if (_control.TransparentColor = False) then Result := 0;
    if (_control.TransparentColor = True) then Result := 1;
end;

procedure TExControlForm.Set_TransparentColor(Value: Integer);
begin
   if (Value = 0) then _control.TransparentColor := False;
   if (Value = 1) then _control.TransparentColor := True;
end;

function TExControlForm.Get_TransparentColorValue: Integer;
begin
      Result := _control.TransparentColorValue;
end;

procedure TExControlForm.Set_TransparentColorValue(Value: Integer);
begin
      _control.TransparentColorValue := Value;
end;

function TExControlForm.Get_Ctl3D: Integer;
begin
    if (_control.Ctl3D = False) then Result := 0;
    if (_control.Ctl3D = True) then Result := 1;
end;

procedure TExControlForm.Set_Ctl3D(Value: Integer);
begin
   if (Value = 0) then _control.Ctl3D := False;
   if (Value = 1) then _control.Ctl3D := True;
end;

function TExControlForm.Get_UseDockManager: Integer;
begin
    if (_control.UseDockManager = False) then Result := 0;
    if (_control.UseDockManager = True) then Result := 1;
end;

procedure TExControlForm.Set_UseDockManager(Value: Integer);
begin
   if (Value = 0) then _control.UseDockManager := False;
   if (Value = 1) then _control.UseDockManager := True;
end;

function TExControlForm.Get_DefaultMonitor: Integer;
begin
    if (_control.DefaultMonitor = dmDesktop) then Result := 0;
    if (_control.DefaultMonitor = dmPrimary) then Result := 1;
    if (_control.DefaultMonitor = dmMainForm) then Result := 2;
    if (_control.DefaultMonitor = dmActiveForm) then Result := 3;
end;

procedure TExControlForm.Set_DefaultMonitor(Value: Integer);
begin
   if (Value = 0) then _control.DefaultMonitor := dmDesktop;
   if (Value = 1) then _control.DefaultMonitor := dmPrimary;
   if (Value = 2) then _control.DefaultMonitor := dmMainForm;
   if (Value = 3) then _control.DefaultMonitor := dmActiveForm;
end;

function TExControlForm.Get_DockSite: Integer;
begin
    if (_control.DockSite = False) then Result := 0;
    if (_control.DockSite = True) then Result := 1;
end;

procedure TExControlForm.Set_DockSite(Value: Integer);
begin
   if (Value = 0) then _control.DockSite := False;
   if (Value = 1) then _control.DockSite := True;
end;

function TExControlForm.Get_DragKind: Integer;
begin
    if (_control.DragKind = dkDrag) then Result := 0;
    if (_control.DragKind = dkDock) then Result := 1;
end;

procedure TExControlForm.Set_DragKind(Value: Integer);
begin
   if (Value = 0) then _control.DragKind := dkDrag;
   if (Value = 1) then _control.DragKind := dkDock;
end;

function TExControlForm.Get_DragMode: Integer;
begin
    if (_control.DragMode = dmManual) then Result := 0;
    if (_control.DragMode = dmAutomatic) then Result := 1;
end;

procedure TExControlForm.Set_DragMode(Value: Integer);
begin
   if (Value = 0) then _control.DragMode := dmManual;
   if (Value = 1) then _control.DragMode := dmAutomatic;
end;

function TExControlForm.Get_Enabled: Integer;
begin
    if (_control.Enabled = False) then Result := 0;
    if (_control.Enabled = True) then Result := 1;
end;

procedure TExControlForm.Set_Enabled(Value: Integer);
begin
   if (Value = 0) then _control.Enabled := False;
   if (Value = 1) then _control.Enabled := True;
end;

function TExControlForm.Get_ParentFont: Integer;
begin
    if (_control.ParentFont = False) then Result := 0;
    if (_control.ParentFont = True) then Result := 1;
end;

procedure TExControlForm.Set_ParentFont(Value: Integer);
begin
   if (Value = 0) then _control.ParentFont := False;
   if (Value = 1) then _control.ParentFont := True;
end;

function TExControlForm.Get_Font: IExodusControlFont;
begin
      Result := TExControlFont.Create(TFont(_control.Font));
end;

function TExControlForm.Get_FormStyle: Integer;
begin
    if (_control.FormStyle = fsNormal) then Result := 0;
    if (_control.FormStyle = fsMDIChild) then Result := 1;
    if (_control.FormStyle = fsMDIForm) then Result := 2;
    if (_control.FormStyle = fsStayOnTop) then Result := 3;
end;

procedure TExControlForm.Set_FormStyle(Value: Integer);
begin
   if (Value = 0) then _control.FormStyle := fsNormal;
   if (Value = 1) then _control.FormStyle := fsMDIChild;
   if (Value = 2) then _control.FormStyle := fsMDIForm;
   if (Value = 3) then _control.FormStyle := fsStayOnTop;
end;

function TExControlForm.Get_HelpFile: Widestring;
begin
      Result := _control.HelpFile;
end;

procedure TExControlForm.Set_HelpFile(const Value: Widestring);
begin
      _control.HelpFile := Value;
end;

function TExControlForm.Get_KeyPreview: Integer;
begin
    if (_control.KeyPreview = False) then Result := 0;
    if (_control.KeyPreview = True) then Result := 1;
end;

procedure TExControlForm.Set_KeyPreview(Value: Integer);
begin
   if (Value = 0) then _control.KeyPreview := False;
   if (Value = 1) then _control.KeyPreview := True;
end;

function TExControlForm.Get_Menu: IExodusControlMainMenu;
begin
      Result := TExControlMainMenu.Create(TTntMainMenu(_control.Menu));
end;

function TExControlForm.Get_OldCreateOrder: Integer;
begin
    if (_control.OldCreateOrder = False) then Result := 0;
    if (_control.OldCreateOrder = True) then Result := 1;
end;

procedure TExControlForm.Set_OldCreateOrder(Value: Integer);
begin
   if (Value = 0) then _control.OldCreateOrder := False;
   if (Value = 1) then _control.OldCreateOrder := True;
end;

function TExControlForm.Get_ObjectMenuItemCount: integer;
begin
    Result := _control.ObjectMenuItem.Count;
end;

function TExControlForm.Get_ObjectMenuItem(Index: integer): IExodusControlMenuItem;
begin
   if ((Index >= 0) and (Index < _control.ObjectMenuItem.Count)) then
      Result := TExControlMenuItem.Create(TTntMenuItem(_control.ObjectMenuItem[Index])) as IExodusControlMenuItem
   else 
      Result := nil;
end;

function TExControlForm.Get_ParentBiDiMode: Integer;
begin
    if (_control.ParentBiDiMode = False) then Result := 0;
    if (_control.ParentBiDiMode = True) then Result := 1;
end;

procedure TExControlForm.Set_ParentBiDiMode(Value: Integer);
begin
   if (Value = 0) then _control.ParentBiDiMode := False;
   if (Value = 1) then _control.ParentBiDiMode := True;
end;

function TExControlForm.Get_PixelsPerInch: Integer;
begin
      Result := _control.PixelsPerInch;
end;

procedure TExControlForm.Set_PixelsPerInch(Value: Integer);
begin
      _control.PixelsPerInch := Value;
end;

function TExControlForm.Get_PopupMenu: IExodusControlPopupMenu;
begin
      Result := TExControlPopupMenu.Create(TTntPopupMenu(_control.PopupMenu));
end;

function TExControlForm.Get_Position: Integer;
begin
    if (_control.Position = poDesigned) then Result := 0;
    if (_control.Position = poDefault) then Result := 1;
    if (_control.Position = poDefaultPosOnly) then Result := 2;
    if (_control.Position = poDefaultSizeOnly) then Result := 3;
    if (_control.Position = poScreenCenter) then Result := 4;
    if (_control.Position = poDesktopCenter) then Result := 5;
    if (_control.Position = poMainFormCenter) then Result := 6;
    if (_control.Position = poOwnerFormCenter) then Result := 7;
end;

procedure TExControlForm.Set_Position(Value: Integer);
begin
   if (Value = 0) then _control.Position := poDesigned;
   if (Value = 1) then _control.Position := poDefault;
   if (Value = 2) then _control.Position := poDefaultPosOnly;
   if (Value = 3) then _control.Position := poDefaultSizeOnly;
   if (Value = 4) then _control.Position := poScreenCenter;
   if (Value = 5) then _control.Position := poDesktopCenter;
   if (Value = 6) then _control.Position := poMainFormCenter;
   if (Value = 7) then _control.Position := poOwnerFormCenter;
end;

function TExControlForm.Get_PrintScale: Integer;
begin
    if (_control.PrintScale = poNone) then Result := 0;
    if (_control.PrintScale = poProportional) then Result := 1;
    if (_control.PrintScale = poPrintToFit) then Result := 2;
end;

procedure TExControlForm.Set_PrintScale(Value: Integer);
begin
   if (Value = 0) then _control.PrintScale := poNone;
   if (Value = 1) then _control.PrintScale := poProportional;
   if (Value = 2) then _control.PrintScale := poPrintToFit;
end;

function TExControlForm.Get_Scaled: Integer;
begin
    if (_control.Scaled = False) then Result := 0;
    if (_control.Scaled = True) then Result := 1;
end;

procedure TExControlForm.Set_Scaled(Value: Integer);
begin
   if (Value = 0) then _control.Scaled := False;
   if (Value = 1) then _control.Scaled := True;
end;

function TExControlForm.Get_ScreenSnap: Integer;
begin
    if (_control.ScreenSnap = False) then Result := 0;
    if (_control.ScreenSnap = True) then Result := 1;
end;

procedure TExControlForm.Set_ScreenSnap(Value: Integer);
begin
   if (Value = 0) then _control.ScreenSnap := False;
   if (Value = 1) then _control.ScreenSnap := True;
end;

function TExControlForm.Get_ShowHint: Integer;
begin
    if (_control.ShowHint = False) then Result := 0;
    if (_control.ShowHint = True) then Result := 1;
end;

procedure TExControlForm.Set_ShowHint(Value: Integer);
begin
   if (Value = 0) then _control.ShowHint := False;
   if (Value = 1) then _control.ShowHint := True;
end;

function TExControlForm.Get_SnapBuffer: Integer;
begin
      Result := _control.SnapBuffer;
end;

procedure TExControlForm.Set_SnapBuffer(Value: Integer);
begin
      _control.SnapBuffer := Value;
end;

function TExControlForm.Get_Visible: Integer;
begin
    if (_control.Visible = False) then Result := 0;
    if (_control.Visible = True) then Result := 1;
end;

procedure TExControlForm.Set_Visible(Value: Integer);
begin
   if (Value = 0) then _control.Visible := False;
   if (Value = 1) then _control.Visible := True;
end;

function TExControlForm.Get_WindowState: Integer;
begin
    if (_control.WindowState = wsNormal) then Result := 0;
    if (_control.WindowState = wsMinimized) then Result := 1;
    if (_control.WindowState = wsMaximized) then Result := 2;
end;

procedure TExControlForm.Set_WindowState(Value: Integer);
begin
   if (Value = 0) then _control.WindowState := wsNormal;
   if (Value = 1) then _control.WindowState := wsMinimized;
   if (Value = 2) then _control.WindowState := wsMaximized;
end;

function TExControlForm.Get_WindowMenuCount: integer;
begin
    Result := _control.WindowMenu.Count;
end;

function TExControlForm.Get_WindowMenu(Index: integer): IExodusControlMenuItem;
begin
   if ((Index >= 0) and (Index < _control.WindowMenu.Count)) then
      Result := TExControlMenuItem.Create(TTntMenuItem(_control.WindowMenu[Index])) as IExodusControlMenuItem
   else 
      Result := nil;
end;




end.
